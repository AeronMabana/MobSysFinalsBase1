@page "/recipes"

<style>
    @@keyframes modalIn {
        from

    {
        opacity: 0;
        transform: translateY(60px);
    }

    to {
        opacity: 1;
        transform: none;
    }

    }

    .recipe-toggle {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 1.2rem;
        gap: 0.5rem;
    }

        .recipe-toggle button {
            border: none;
            background: #f3f8ff;
            color: #23508d;
            border-radius: 8px;
            padding: 0.35rem 0.95rem;
            font-size: 1.1rem;
            transition: background 0.15s, color 0.15s;
            cursor: pointer;
        }

            .recipe-toggle button.active,
            .recipe-toggle button:hover {
                background: #23508d;
                color: #fff;
            }

    .recipes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(210px, 1fr));
        gap: 1.3rem;
    }

    .recipe-card {
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 2px 18px 0 rgba(60,80,140,0.07);
        overflow: hidden;
        transition: transform 0.17s, box-shadow 0.17s;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        min-height: 290px;
        position: relative;
    }

        .recipe-card:hover, .recipe-card:focus-visible {
            transform: translateY(-4px) scale(1.03);
            box-shadow: 0 12px 30px 0 rgba(60,80,140,0.12);
        }

    .recipe-img {
        width: 100%;
        height: 160px;
        object-fit: cover;
        background: #e8e8e8;
    }

    .recipe-content {
        flex: 1;
        padding: 1.1rem 1rem 0.8rem 1rem;
        display: flex;
        flex-direction: column;
    }

    .recipe-title {
        font-size: 1.07rem;
        font-weight: 600;
        color: #23508d;
        margin-bottom: 0.25rem;
        word-break: break-word;
    }

    .recipe-desc {
        color: #4a5667;
        font-size: 0.97rem;
        flex: 1;
        margin-bottom: 0.2rem;
    }

    .recipe-prep {
        font-size: 0.93rem;
        color: #23508d;
        margin-bottom: 0.1rem;
        font-weight: 500;
    }

    .recipe-list {
        display: flex;
        flex-direction: column;
        gap: 1.1rem;
    }

    .recipe-list-item {
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 2px 18px 0 rgba(60,80,140,0.07);
        display: flex;
        align-items: flex-start;
        gap: 1.2rem;
        padding: 1rem 1.2rem;
        transition: box-shadow 0.17s;
        cursor: pointer;
        min-height: 120px;
        position: relative;
    }

        .recipe-list-item:hover, .recipe-list-item:focus-visible {
            box-shadow: 0 12px 30px 0 rgba(60,80,140,0.12);
        }

    .recipe-list-img {
        width: 100px;
        height: 90px;
        object-fit: cover;
        border-radius: 10px;
        background: #e8e8e8;
        flex-shrink: 0;
    }

    .recipe-list-content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .recipe-list-title {
        font-size: 1.11rem;
        font-weight: 600;
        color: #23508d;
        margin-bottom: 0.18rem;
    }

    .recipe-list-desc {
        color: #4a5667;
        font-size: 0.97rem;
        margin-bottom: 0.1rem;
    }

    .recipe-list-prep {
        font-size: 0.93rem;
        color: #23508d;
        font-weight: 500;
    }

    .recipe-modal-bg {
        background: rgba(30,40,60,0.23);
        position: fixed;
        inset: 0;
        z-index: 2000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .recipe-modal {
        background: #fff;
        border-radius: 18px;
        max-width: 410px;
        width: 98vw;
        box-shadow: 0 12px 40px 0 rgba(60,80,140,0.18);
        padding: 2.1rem 1.7rem 1.5rem 1.7rem;
        position: relative;
        animation: modalIn 0.2s cubic-bezier(0.4,0.7,0.2,1);
    }

    .recipe-modal-close {
        position: absolute;
        top: 0.7rem;
        right: 1.1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #23508d;
        cursor: pointer;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #23508d;
        margin-bottom: 0.6rem;
    }

    .modal-section {
        margin-bottom: 1.1rem;
    }

    .modal-section-title {
        font-weight: 600;
        color: #23508d;
        margin-bottom: 0.25rem;
        font-size: 1.05rem;
    }

    .modal-prep-time {
        font-size: 1.02rem;
        font-weight: 500;
        color: #23508d;
    }

    .modal-instructions {
        font-size: 0.98rem;
        color: #444;
        white-space: pre-line;
    }

    .modal-ingredients {
        font-size: 0.98rem;
        color: #444;
        margin-bottom: 0.4rem;
        padding-left: 1.1rem;
    }

    .modal-convert {
        margin-top: 0.7rem;
        font-size: 0.96rem;
        font-weight: 500;
        color: #23508d;
    }

        .modal-convert select {
            margin-left: 0.5rem;
            padding: 0.15rem 0.4rem;
            border-radius: 7px;
            border: 1px solid #b5cae3;
            outline: none;
        }
</style>

<div style="max-width: 1100px; margin: 0 auto; padding: 2.5rem 1.1rem;">
    <div class="recipe-toggle">
        <button class="@((showGrid ? "active" : ""))" @onclick="() => showGrid = true" title="Grid View">
            <i class="fas fa-th"></i>
        </button>
        <button class="@((!showGrid ? "active" : ""))" @onclick="() => showGrid = false" title="List View">
            <i class="fas fa-list"></i>
        </button>
    </div>
    @if (showGrid)
    {
        <div class="recipes-grid">
            @foreach (var recipe in Recipes)
            {
                <div class="recipe-card" tabindex="0" @onclick="@(() => ShowRecipe(recipe))" @onkeydown="@(e => { if (e.Key == "Enter") ShowRecipe(recipe); })">
                    <img class="recipe-img" src="@recipe.ThumbnailUrl" alt="@recipe.Title" />
                    <div class="recipe-content">
                        <div class="recipe-title">@recipe.Title</div>
                        <div class="recipe-desc">@recipe.Description</div>
                        <div class="recipe-prep">Prep Time: @recipe.PrepTimeMinutes min</div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="recipe-list">
            @foreach (var recipe in Recipes)
            {
                <div class="recipe-list-item" tabindex="0" @onclick="@(() => ShowRecipe(recipe))" @onkeydown="@(e => { if (e.Key == "Enter") ShowRecipe(recipe); })">
                    <img class="recipe-list-img" src="@recipe.ThumbnailUrl" alt="@recipe.Title" />
                    <div class="recipe-list-content">
                        <div class="recipe-list-title">@recipe.Title</div>
                        <div class="recipe-list-desc">@recipe.Description</div>
                        <div class="recipe-list-prep">Prep Time: @recipe.PrepTimeMinutes min</div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (selectedRecipe != null)
{
    <div class="recipe-modal-bg" @onclick="CloseModal">
        <div class="recipe-modal" @onclick:stopPropagation>
            <button class="recipe-modal-close" @onclick="CloseModal" title="Close">&times;</button>
            <div class="modal-title">@selectedRecipe.Title</div>
            <div class="modal-section">
                <img class="recipe-img" src="@selectedRecipe.ThumbnailUrl" alt="@selectedRecipe.Title" style="border-radius:14px; margin-bottom:0.7rem;max-height:180px;" />
                <div class="modal-prep-time">Prep Time: @selectedRecipe.PrepTimeMinutes min</div>
            </div>
            <div class="modal-section">
                <div class="modal-section-title">Ingredients</div>
                <div class="modal-convert">
                    Measurement:
                    <select @bind="selectedSystem">
                        <option value="@MeasurementSystem.US">US</option>
                        <option value="@MeasurementSystem.Metric">Metric</option>
                    </select>
                </div>
                <ul style="margin-top:0.55rem;">
                    @foreach (var ing in selectedRecipe.Ingredients)
                    {
                        <li class="modal-ingredients">
                            @if (selectedSystem == MeasurementSystem.US)
                            {
                                @($"{ing.AmountUS} {ing.UnitUS}")
                            }
                            else
                            {
                                @($"{ing.AmountMetric} {ing.UnitMetric}")
                            }
                            @($" {ing.Name}")
                        </li>
                    }
                </ul>
            </div>
            <div class="modal-section">
                <div class="modal-section-title">Instructions</div>
                <div class="modal-instructions">@selectedRecipe.Instructions</div>
            </div>
        </div>
    </div>
}

@code {
    private bool showGrid = true;
    private RecipeModel? selectedRecipe;
    private MeasurementSystem selectedSystem = MeasurementSystem.US;

    private List<RecipeModel> Recipes = new()
    {
        new RecipeModel {
            Title="Classic Pancakes",
            ThumbnailUrl="https://images.pexels.com/photos/376464/pexels-photo-376464.jpeg?auto=compress&w=400",
            Description="Fluffy, golden and easy to make pancakes for any breakfast.",
            PrepTimeMinutes = 15,
            Ingredients = new() {
                new Ingredient { Name="Flour", AmountUS=1.5, UnitUS="cups", AmountMetric=190, UnitMetric="g" },
                new Ingredient { Name="Milk", AmountUS=1.25, UnitUS="cups", AmountMetric=295, UnitMetric="ml" },
                new Ingredient { Name="Eggs", AmountUS=1, UnitUS="large", AmountMetric=1, UnitMetric="large" },
                new Ingredient { Name="Sugar", AmountUS=2, UnitUS="tbsp", AmountMetric=25, UnitMetric="g" },
                new Ingredient { Name="Baking Powder", AmountUS=2, UnitUS="tsp", AmountMetric=8, UnitMetric="g" }
            },
            Instructions="1. In a large bowl, whisk flour, sugar, and baking powder.\n2. Add milk and eggs, mix until combined.\n3. Heat a lightly oiled skillet over medium heat.\n4. Pour batter and cook until bubbles form, then flip and cook until golden."
        },
        new RecipeModel {
            Title="Spaghetti Bolognese",
            ThumbnailUrl="https://images.pexels.com/photos/1279330/pexels-photo-1279330.jpeg?auto=compress&w=400",
            Description="Hearty Italian pasta with rich meat sauce.",
            PrepTimeMinutes = 25,
            Ingredients = new() {
                new Ingredient { Name="Spaghetti", AmountUS=12, UnitUS="oz", AmountMetric=340, UnitMetric="g" },
                new Ingredient { Name="Ground Beef", AmountUS=1, UnitUS="lb", AmountMetric=450, UnitMetric="g" },
                new Ingredient { Name="Tomato Sauce", AmountUS=2, UnitUS="cups", AmountMetric=480, UnitMetric="ml" },
                new Ingredient { Name="Onion", AmountUS=1, UnitUS="medium", AmountMetric=1, UnitMetric="medium" }
            },
            Instructions="1. Cook spaghetti according to package instructions.\n2. In a pan, sauté onion until translucent.\n3. Add ground beef, cook until browned.\n4. Stir in tomato sauce, simmer 10 min.\n5. Serve sauce over pasta."
        },
        new RecipeModel {
            Title="Fresh Caesar Salad",
            ThumbnailUrl="https://images.pexels.com/photos/1640777/pexels-photo-1640777.jpeg?auto=compress&w=400",
            Description="Crisp romaine with creamy Caesar and homemade croutons.",
            PrepTimeMinutes = 10,
            Ingredients = new() {
                new Ingredient { Name="Romaine Lettuce", AmountUS=1, UnitUS="head", AmountMetric=1, UnitMetric="head" },
                new Ingredient { Name="Caesar Dressing", AmountUS=0.5, UnitUS="cup", AmountMetric=120, UnitMetric="ml" },
                new Ingredient { Name="Croutons", AmountUS=1, UnitUS="cup", AmountMetric=40, UnitMetric="g" }
            },
            Instructions="1. Chop romaine and place in a large bowl.\n2. Add dressing and toss to coat.\n3. Top with croutons and serve immediately."
        }
    };

    public class RecipeModel
    {
        public string Title { get; set; } = string.Empty;
        public string ThumbnailUrl { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int PrepTimeMinutes { get; set; }
        public List<Ingredient> Ingredients { get; set; } = new();
        public string Instructions { get; set; } = string.Empty;
    }

    public class Ingredient
    {
        public string Name { get; set; } = string.Empty;
        public double AmountUS { get; set; }
        public string UnitUS { get; set; } = string.Empty;
        public double AmountMetric { get; set; }
        public string UnitMetric { get; set; } = string.Empty;
    }

    public enum MeasurementSystem
    {
        US,
        Metric
    }

    private void ShowRecipe(RecipeModel recipe)
    {
        selectedRecipe = recipe;
    }

    private void CloseModal()
    {
        selectedRecipe = null;
    }
}